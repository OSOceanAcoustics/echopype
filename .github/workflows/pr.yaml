name: Test PR

on:
  pull_request:
    paths-ignore: [".ci_helpers/docker/**", "**/docker.yaml"]

env:
  CONDA_ENV: echopype

jobs:
  test:
    name: ${{ matrix.python-version }}-build
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8]
        experimental: [false]
        include:
        - python-version: 3.9
          experimental: true
    services:
      # TODO: figure out how to update tag when there's a new one
      minio:
        image: cormorack/minioci:latest
        ports:
          - 9000:9000
      httpserver:
        image: cormorack/http:latest
        ports:
          - 8080:80
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Copying test data to http server
        run: |
          rm -rf ./echopype/test_data
          docker cp -L ${{ job.services.httpserver.id }}:/usr/local/apache2/htdocs/data ./echopype/test_data

          # Check data endpoint
          curl http://localhost:8080/data/
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Set environment variables
        run: |
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV
      - name: Cache conda
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if '.ci_helpers/py{0}.yaml' has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles(format('.ci_helpers/py{0}.yaml', matrix.python-version)) }}
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ${{ env.CONDA_ENV }}
          environment-file: .ci_helpers/py${{ matrix.python-version }}.yaml
          miniforge-variant: Mambaforge
          miniforge-version: 4.10.0-0
          use-mamba: true
          auto-activate-base: false
          use-only-tar-bz2: true
      - name: Print conda env
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Install dev tools
        shell: bash -l {0}
        run: |
          mamba install -c conda-forge --yes --file requirements-dev.txt
      - name: Install echopype
        shell: bash -l {0}
        run: |
          python -m pip install -e .
      - name: Finding changed files
        id: files
        uses: lsetiawan/get-changed-files@pr_target
        with:
          format: 'csv'
      - name: Print Changed files
        shell: bash -l {0}
        run: echo "${{ steps.files.outputs.added_modified_renamed }}"
      - name: Running all Tests
        if: contains(github.event.pull_request.labels.*.name, 'Needs Complete Testing')
        shell: bash -l {0}
        run: |
          pytest -vv -rx --cov=echopype --cov-report=xml --log-cli-level=WARNING --disable-warnings |& tee ci_${{ matrix.python-version }}_test_log.log
      - name: Running Tests
        if: "!contains(github.event.pull_request.labels.*.name, 'Needs Complete Testing')"
        shell: bash -l {0}
        run: |
          python .ci_helpers/run-test.py --pytest-args="--log-cli-level=WARNING,-vv,-rx,--disable-warnings" --include-cov ${{ steps.files.outputs.added_modified_renamed }} |& tee ci_test_log.log
      - name: Upload ci test log
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: ci_test_log
          path: ci_test_log.log
      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-umbrella
          fail_ci_if_error: false
