.. _data-format:

Data Format
============

The lack of interoperability among data collected by different sonar
systems is currently a major obstacle toward integrative analysis of
sonar data at large scales.
echopype aims at addressing this problem by providing tools for
converting data from manufacturer-specific formats into a standardized
`netCDF <https://www.unidata.ucar.edu/software/netcdf/docs/
netcdf_introduction.html>`_ file format.
NetCDF is the `current defacto standard <https://clouds.eos.ubc.ca/
~phil/courses/parallel_python/02_xarray_zarr.html>`_ in climate
research and is supported by many powerful Python packages for
efficient computation, of which echopype take advantage in its
data analysis modules.


Interoperable netCDF files
---------------------------

echopype use a modified form of the `ICES SONAR-netCDF4 convention`_ as the
interoperable data format to which all data can be converted to.
We made critical modifications to the data storage structure so that
the underlying computation can take full advantage of the power of
xarray in manipulating labelled multi-dimensional arrays.
See `Modifications to SONAR-netCDF4`_ for details of this modification.

We also consider switching to use `zarr <https://zarr.readthedocs.io/en/stable/>`_
in the future for cloud-optimized data storage and access.

.. _ICES SONAR-netCDF4 convention:
   http://www.ices.dk/sites/pub/Publication%20Reports/Cooperative%20Research%20Report%20(CRR)/CRR341.pdf


Supported file types
----------------------

echopype currently supports conversion from

- ``.raw`` files generated by Simrad's EK60 echosounder
- ``.01A`` files generated by ASL Environmental Sciences' AZFP echosounder

Support for conversion from other sonar data files will be added in future release.
File types included in the near-term plan are:

- ``.raw`` files from Simrad's EK80 broadband echosounder
- *raw beam* data from common Acoustic Doppler Current Profilers (ADCPs)

We also consider support for multibeam sonar data in the future.


Modifications to SONAR-netCDF4
---------------------------------
echopype is designed to handle multi-dimensional labelled data sets
efficiently. Therefore, we store backscatter data (the echoes) from
different frequency channels in a multi-dimensional array under a
single ``Beam`` group within a netCDF file. Because of this change,
all frequency-dependent parameters, such as absorption coefficients,
are also stored as an array with a frequency coordinate.

.. For example:
    .. code-block:: python

        import xarray as xr
        fname = 'some-path/some-file.nc'
        ds_beam = xr.open_dataset(fname, group='Beam')  # open the Beam group as an xarray DataSet
        ds_env = xr.open_dataset(fname, group='Environment')  # open the Environment group as an xarray DataSet
        In[1]: ds_env.absorption_coefficient_indicative
        Out[1]:
        In[2]: ds_beam.backscatter_r
        Out[2]:

This is different from the SONAR-netCDF4 convention, in which data
and parameters from different channels are stored in different beam
groups under the ``Sonar`` group.
In the convention this was designed to accommodate potential differences
in the number of bins along range.
However, it is more convenient to store and index data directly by the
time, range, and frequency/beam direction coordinates (see ``pandas``
and ``xarray`` documentation for more info about coordinates and
dimensions).
echopype handles this by filling in the multi-dimensional array with
``NaN`` when the number of bins along range is different across
different channels.

In addition to computational efficiency, another advantage of
echopype's approach in restructuring the netCDF format is the enhanced
readability of code, which make data analysis computations more
tractable. For example, to extract data from a particular frequency,
users can simply do the following without worrying about the numerical
sequence of the index of the selected frequency:

.. code-block:: python

    import xarray as xr
    fname = 'some-path/some-file.nc'
    ds = xr.open_dataset(fname, group='Beam')  # open file as an xarray DataSet
    data_120k = ds.backscatter_r.sel(frequency=120000)  # explicit indexing for frequency


