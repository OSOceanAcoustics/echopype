from pathlib import Path
import shutil
import numpy as np
import xarray as xr
import pandas as pd
from scipy.io import loadmat
from ..convert import open_raw

azfp_path = Path('./echopype/test_data/azfp')
# raw_paths = ['./echopype/test_data/azfp/set1/' + file
#              for file in os.listdir('./echopype/test_data/azfp/set1')]   # Multiple files (first is xml file)


def test_convert_azfp_01a_matlab_raw():
    """Compare parsed raw data with Matlab outputs.
    """
    azfp_01a_path = str(azfp_path.joinpath('17082117.01A'))
    azfp_xml_path = str(azfp_path.joinpath('17041823.XML'))
    azfp_matlab_data_path = str(azfp_path.joinpath('from_matlab/17082117_matlab_Data.mat'))

    # Convert file
    echodata = open_raw(file=azfp_01a_path, model='AZFP', xml_path=azfp_xml_path)
    echodata.to_netcdf()

    # Read in the dataset that will be used to confirm working conversions. (Generated by Matlab)
    ds_matlab = loadmat(azfp_matlab_data_path)

    # Test beam group
    with xr.open_dataset(echodata.output_file, group='Beam') as ds_beam:
        # frequency
        assert np.array_equal(ds_matlab['Data']['Freq'][0][0].squeeze(),
                              ds_beam.frequency / 1000)  # matlab file in kHz
        # backscatter count
        assert np.array_equal(np.array([ds_matlab['Output'][0]['N'][fidx] for fidx in range(4)]),
                              ds_beam.backscatter_r.values)
        # tilt x-y
        assert np.array_equal(np.array([d[0] for d in ds_matlab['Data']['Ancillary'][0]]).squeeze(),
                              ds_beam.tilt_x_count)
        assert np.array_equal(np.array([d[1] for d in ds_matlab['Data']['Ancillary'][0]]).squeeze(),
                              ds_beam.tilt_y_count)

    # Test vendor group
    with xr.open_dataset(echodata.output_file, group='Vendor') as ds_vend:
        # Test temperature
        assert np.array_equal(np.array([d[4] for d in ds_matlab['Data']['Ancillary'][0]]).squeeze(),
                              ds_vend.ancillary.isel(ancillary_len=4).values)
        assert np.array_equal(np.array([d[0] for d in ds_matlab['Data']['BatteryTx'][0]]).squeeze(),
                              ds_vend.battery_tx)
        assert np.array_equal(np.array([d[0] for d in ds_matlab['Data']['BatteryMain'][0]]).squeeze(),
                              ds_vend.battery_main)

    Path(echodata.output_file).unlink()


def test_convert_azfp_01a_matlab_derived():
    """Compare variables derived from raw parsed data with Matlab outputs.
    """
    # TODO: test derived data
    #  - ds_beam.ping_time from 01A raw data records
    #  - investigate why ds_beam.tilt_x/y are different from ds_matlab['Data']['Tx']/['Ty']
    #  - derived temperature

    pass


def test_convert_azfp_01a_raw_echoview():
    """Compare parsed power data (count) with csv exported by EchoView.
    """
    azfp_01a_path = str(azfp_path.joinpath('17082117.01A'))
    azfp_xml_path = str(azfp_path.joinpath('17041823.XML'))

    # Read csv files exported by EchoView
    azfp_csv_path = sorted(list(azfp_path.glob('from_echoview/17082117-raw*.csv')))  # exported from EchoView
    channels = []
    for file in azfp_csv_path:
        channels.append(pd.read_csv(str(file), header=None, skiprows=[0]).iloc[:, 6:])
    test_power = np.stack(channels)

    # Convert to netCDF and check
    echodata = open_raw(file=azfp_01a_path, model='AZFP', xml_path=azfp_xml_path)
    echodata.to_netcdf()
    with xr.open_dataset(echodata.output_file, group='Beam') as ds_beam:
        assert np.array_equal(test_power, ds_beam.backscatter_r)
    Path(echodata.output_file).unlink()

    # Convert to zarr and check
    echodata.to_zarr()
    with xr.open_zarr(echodata.output_file, group='Beam') as ds_beam:
        assert np.array_equal(test_power, ds_beam.backscatter_r)
    shutil.rmtree(echodata.output_file)


def test_convert_azfp_01a_different_ranges():
    """Test converting files with different range settings across frequency.
    """
    azfp_01a_path = str(azfp_path.joinpath('17031001.01A'))
    azfp_xml_path = str(azfp_path.joinpath('17030815.XML'))

    # Convert file
    echodata = open_raw(file=azfp_01a_path, model='AZFP', xml_path=azfp_xml_path)
    echodata.to_netcdf()
    echodata.to_zarr()



# def test_combine():
#     """Test combining multiple raw files"""
#     export_folder = './echopype/test_data/azfp/export/'
#
#     # Test combining while converting
#     tmp = Convert(file=raw_paths[1:5], model='AZFP', xml_path=raw_paths[0])
#     tmp.to_netcdf(save_path=export_folder, overwrite=True, combine=True)
#
#     with xr.open_dataset(tmp.output_file, group='Beam') as ds_beam:
#         # Test if the concatenation along ping time worked
#         assert len(ds_beam.ping_time) == 960
#     shutil.rmtree(export_folder)
