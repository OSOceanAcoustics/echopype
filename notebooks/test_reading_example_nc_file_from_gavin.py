
# coding: utf-8

# In[1]:


import os, glob


# In[2]:


import xarray as xr
import numpy as np


# In[3]:


import netCDF4


# In[6]:


pname = '/Volumes/Transcend/Dropbox/Z_wjlee/projects/echopype/'
fname = 'test90-D20171107-T195023.nc'


# In[7]:


ds = xr.open_dataset(os.path.join(pname,fname))


# In[8]:


ds


# In[13]:


ds.close()


# In[15]:


f = netCDF4.Dataset(os.path.join(pname,fname))


# In[16]:


f


# In[18]:


f['Sonar/Beam_group1']


# In[9]:


ds_provenance = xr.open_dataset(os.path.join(pname,fname),group='Provenance', decode_times=False)


# In[10]:


ds_provenance


# In[11]:


ds_sonar = xr.open_dataset(os.path.join(pname,fname),group='Sonar', decode_times=False)


# In[12]:


ds_sonar


# In[13]:


ds_annotation = xr.open_dataset(os.path.join(pname,fname),group='Annotation')


# In[95]:


ds_annotation = xr.open_dataset(os.path.join(pname,fname),group='Annotation', decode_times=False)


# In[96]:


ds_annotation


# In[98]:


ds_annotation.time


# In[ ]:


ds_annotation.annotation_category


# In[174]:


ds_env = xr.open_dataset(os.path.join(pname,fname),group='Environment', decode_times=False)


# In[175]:


ds_env


# In[101]:


ds_env.absorption_indicative


# In[102]:


ds_env.sound_speed_indicative


# In[168]:


freq = np.array([30000.0], dtype='float32')

da_absorption_indicative = xr.DataArray(np.array([0.006], dtype='float32'),
                                        coords=[freq], dims=['frequency'],
                                        attrs={'long_name': "Indicative acoustic absorption", 
                                               'units': "dB/m",
                                               'valid_min': 0.0})
da_sound_speed_indicative = xr.DataArray(np.array([1490.], dtype='float32'),
                                         coords=[freq], dims=['frequency'],
                                         attrs={'long_name': "Indicative sound speed",
                                                'standard_name': "speed_of_sound_in_sea_water",
                                                'units': "m/s",
                                                'valid_min': 0.0})


# In[169]:


da_absorption_indicative


# In[170]:


da_sound_speed_indicative


# In[176]:


ds_test = xr.Dataset({'absorption_indicative': da_absorption_indicative,
                      'sound_speed_indicative': da_sound_speed_indicative}, 
                     coords={'frequency': (['frequency'], freq)})


# In[183]:


ds_test.frequency.attrs['long_name'] = "Acoustic frequency"
ds_test.frequency.attrs['standard_name'] = "sound_frequency"
ds_test.frequency.attrs['units'] = "Hz"
ds_test.frequency.attrs['valid_min'] = 0.0


# In[185]:


ds_test


# In[186]:


ds_test.frequency


# In[197]:


dsf = ds.to_netcdf(path='./test_assert2.nc')


# In[199]:


ds.equals(xr.open_dataset('./test_assert2.nc'))


# In[184]:


ds_env


# In[187]:


ds_env.frequency


# In[ ]:


ds = xr.Dataset({'d_all': data_d_all,
                     'h_actual_all': data_h_actual_all, 'h_est_all': data_h_est_all,
                     'beam_ij_all': data_beam_ij_all,
                     'hit_value_all': data_hit_value_all, 'hit_type_all': data_hit_type_all})


# In[20]:


ds_sonar_beamgrp1 = xr.open_dataset(os.path.join(pname,fname),group='Sonar/Beam_group1', decode_times=False)


# In[21]:


ds_sonar_beamgrp1


# In[25]:


ds_sonar_beamgrp1.backscatter_i


# In[24]:


ds_sonar_beamgrp1.beam_direction_x


# In[35]:


import datetime as dt


# In[39]:


time_obj = dt.datetime(2018,9,15,13,19,20)


# In[47]:


time_obj.tzinfo


# In[42]:


dt.tzinfo(time_obj)


# In[60]:


dt.datetime(2018,9,15,13,19,20).isoformat()+'Z'


# In[59]:


dt.datetime.utcnow()


# In[53]:


dt.timezone.tzname()


# In[92]:


# Attributes
attrs_dict = dict()
attrs_dict['Conventions'] = "CF-1.7, SONAR-netCDF4, ACDD-1.3"
attrs_dict['date_created'] = dt.datetime(2018,9,15,13,19,20).isoformat()+'Z'
attrs_dict['keywords'] = "EK60"
attrs_dict['sonar_convention_authority'] = "ICES"
attrs_dict['sonar_convention_name'] = "SONAR-netCDF4"
attrs_dict['sonar_convention_version'] = "1.7"
attrs_dict['summary'] = "some test data"
attrs_dict['title'] = "Files generated by the XYZ sonar"


# In[93]:


attrs_dict


# In[76]:


# Open up .nc file for writing
ncfile2 = netCDF4.Dataset("./test2.nc", "w", format="NETCDF4")


# In[77]:


[ncfile2.setncattr(k, v) for k, v in attrs_dict.items()]


# In[78]:


ncfile2


# In[79]:


ncfile2.setncattr('test_key', 'test_value')


# In[82]:


a = ncfile2.setncattr('test_key2', 'test_value2')
a


# In[81]:


print(ncfile2.setncattr('test_key2', 'test_value2'))


# In[89]:


try:
    [ncfile2.setncattr(k, v) for k, v in attrs_dict.items()]
    print('success')
except:
    print('otherwise')


# In[91]:


with netCDF4.Dataset("./test3.nc", "w", format="NETCDF4") as ncfile3:
    [ncfile3.setncattr(k, v) for k, v in attrs_dict.items()]


# In[69]:


for kv in attrs_dict.items():
    ncfile.setncattr(kk,vv)


# In[ ]:


# Attributes
ncfile.Conventions = "CF-1.7, SONAR-netCDF4, ACDD-1.3"
ncfile.date_created = date_created
ncfile.keywords = "EK60"
ncfile.sonar_convention_authority = "ICES"
ncfile.sonar_convention_name = "SONAR-netCDF4"
ncfile.sonar_convention_version = "1.7"
ncfile.summary = "some test data"


# In[64]:


pwd

